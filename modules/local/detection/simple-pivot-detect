#!/usr/bin/env python

meta = {
	'author':'Benjamin Donnelly',
	'ported_by':'Benjamin Donnelly',
	'version':'0.1.0',
	'info':"""Simple Pivot detect is an incredibly simple script which detects obvious network pivoting activity by searching through process chains for two bordering signs of network activity.
Aka, does a network active process have any children which are also active on the network?"""
}

variables = {}

import os
import subprocess

def main():
	a = subprocess.Popen("netstat -antp | awk '/ESTABLISHED/ {print $7}'", shell=True, stdout=subprocess.PIPE)
	out, err = a.communicate()

	pids = []

	for entry in out.split("\n"):
		if len(entry) > 1:
			print entry.split("/")[0]
			pids.append(entry.split("/")[0])


	if len(pids) > 0:	
		for pid in pids:
			if len(pid) > 0 and pid !="0":
				ppid = 11
				while int(ppid) > 10:
					print pid
					a = subprocess.Popen("ps -p %s -o ppid=" % (pid), shell=True, stdout=subprocess.PIPE)
					out, err = a.communicate()
					ppid = out.strip()
			
					a = subprocess.Popen("netstat -antp | awk '{split($7,a,\"/\"); if(a[1] == %s) {print $6}}'" % (ppid), shell=True, stdout=subprocess.PIPE)
					out, err = a.communicate()
					if "ESTABLISHED" in out:
						a = subprocess.Popen("ps -p %s -o comm=" % (ppid), shell=True, stdout=subprocess.PIPE)
						output, err = a.communicate()
						print "Alert: %s :: %s" % (ppid, output)
						ppid = 0
					else:
						pid = ppid

class commands:
	def __init__(self)
		return

	@staticmethod
	def run(self,variables)
		main()
